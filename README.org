#+title: spit

Simple, personal installation tool.

This installs packaged source.

Spack packages installed today.

Time is precious, savor.

So private, I take?

* What?

This package satisfies some narrow requirements of mine:

- Install software of versions more recent than in Debian testing.

- Minimize non-OS dependencies.

- Allow control of build options.

- Easy configuration.

- Easy to add new packages and upgrade existing.

- Minimal user environment mangling.

- Minimal commands to produce. 

- Can apply to arbitrary packages.

This rules out a lot of options.  I've tried:

- Nix/Guix :: These always ultimately defeat me due to the configuration language.
- Debian sid :: Does not always have all packages and/or has a delay for new versions.
- DIY package manager :: I have developed a few but as I gain better understanding of the problem space I realized I was doomed to reinvent Spack.

If spit satisfies your requirements, feel free to use it.  It's
licensed same as Spack.

* Spack?

This uses [[https://spack.readthedocs.io][Spack]] in a narrow, controlled way which will not conflict
with use of Spack for other reasons.  It provides a Spack /scope/ and
package repository to install into its own area and from which a Spack
view is built.  It does not utilize Spack shell environment management
in any way.

Spack can build almost an entire OS but the requirements with spit is
to leverage the native OS packages as much as feasible.  Thus as
packages are included through dependencies in the main ~spit~ bundle
package their top-most dependencies are added to ~packages.yaml~ with
redirect to ~/usr~.

Spit includes some ~package.py~'s which are either novel or fixes to
what are in Spack.  They are written to work with Spack without OS
redirects in that Spack package names are depended on.  However, they
are only tested in spit's scope.


* Installation

One core aspect of spit is to use Spack only to build the top-level
packages and use the OS packages for the rest.  Thus, it is up to the
user to assure sufficient OS packages are installed.  A likely
incomplete set of packages for Debian is:

#+begin_example
apt install \
aspell bison cmake curl dbus dbus-x11 flex fontconfig libcairo2-dev libcanberra-dev libdbus-1-dev libfontconfig-dev libfreetype6-dev libgcrypt20-dev libgdk-pixbuf2.0-dev libgif-dev libgl1-mesa-dev libglib2.0-dev libharfbuzz-dev libjpeg62-turbo-dev liblcms2-dev libpango1.0-dev libpcre3-dev libperl-dev libpng-dev librsync-dev libsigsegv2 libstartup-notification0-dev libtiff-dev libtiff-dev libx11-dev libx11-xcb-dev libxcb-cursor-dev libxcb-util-dev libxcursor-dev libxi-dev libxinerama-dev libxkbcommon-dev libxkbcommon-x11-dev libxml2-dev libxpm-dev libxpm-dev libxrandr-dev openssl python3-dev python3-matplotlib xz-utils zlib1g-dev
#+end_example

To install the top-level packages pick some location writable by your user:

#+begin_example
sudo mkdir /usr/local/spit
sudo chown $USER:@USER /usr/local/spit
cd /usr/local/spit
git clone --recursive git@github.com:brettviren/spit.git .
./cycle.sh
#+end_example

* Usage

#+begin_example
fish_add_path -U /usr/local/spit/view/bin
#+end_example

Or, otherwise put spit's ~view/bin/~ dir into your ~$PATH~.


* Updating

Add/edit the ~package.py~'s, return ~cycle.sh~.



