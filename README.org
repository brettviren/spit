#+title: spit

Simple, personal installation tool.

This installs packaged source.

Spack packages installed today.

Time is precious, savor.

So private, I take?

* What?

This package satisfies some narrow requirements of mine:

- Install software of versions more recent than in Debian testing.

- Minimize non-OS dependencies.

- Allow control of build options.

- Easy configuration.

- Easy to add new packages and upgrade existing.

- Minimal user environment mangling (no more than is needed to use ~/usr/local~).

- Minimal commands to produce. 

- Can apply to arbitrary packages.

This rules out a lot of options.  I've tried:

- Nix/Guix :: These always ultimately defeat me due to the configuration language.
- Debian sid :: Does not always have all packages and/or has a delay for new versions.
- DIY package manager :: I have developed a few but as I gain better understanding of the problem space I realized I was doomed to reinvent Spack.

If spit satisfies your requirements, feel free to use it.  It's
licensed same as Spack.

* Spack?

This uses [[https://spack.readthedocs.io][Spack]] in a narrow, controlled way which will not conflict
with use of Spack for other reasons.  It provides a Spack /scope/ and
package repository to install into its own area and from which a Spack
view is built.  It does not utilize Spack shell environment management
in any way.

Spack can build almost an entire OS but the requirements with spit is
to leverage the native OS packages as much as feasible.  Thus as
packages are included through dependencies in the main ~spit~ bundle
package their top-most dependencies are added to ~packages.yaml~ with
redirect to ~/usr~.

Spit includes some ~package.py~'s which are either novel or fixes to
what are in Spack.  They are written to work with Spack without OS
redirects in that Spack package names are depended on.  However, they
are only tested in spit's scope.


* Installation

One core aspect of spit is to use Spack only to build the top-level
packages and use the OS packages for the rest.  Thus, it is up to the
user to assure sufficient OS packages are installed.  A likely but
perhaps incomplete set of packages for Debian can be installed with:

#+begin_example
apt-get build-dep kitty herbstluftwm emacs lemonbar rofi weechat perl  
apt-get install aspell curl dbus dbus-x11 fontconfig lua5.4
apt-get install libzstd-dev libxcb-cursor-dev python3-setuptools librsync-dev gnutls-bin
#+end_example

Emacs ~pdf-tools~ will want:

#+begin_example
apt-get install autoconf automake gcc libpng-dev libpoppler-dev libpoppler-glib-dev libz-dev make pkg-config      
#+end_example




Then, to install the top-level packages from source using spit, pick
some location writable by your user and:

#+begin_example
sudo mkdir /usr/local/spit
sudo chown $USER:@USER /usr/local/spit
cd /usr/local/spit
git clone --recursive git@github.com:brettviren/spit.git .
./spit cycle
#+end_example

* Use the install

#+begin_example
fish_add_path -U /usr/local/spit/view/bin
#+end_example

Or, otherwise put spit's ~view/bin/~ dir into your ~$PATH~.


* Update the install

The ~spit~ command is a wrapper around ~spack~ to run inside spit's scope.

** Make a new package

#+begin_example
./spit create [-t template] <name>
#+end_example

** Update an existing package

#+begin_example
./spit checksum <name>
./spit edit <name>
#+end_example

The only tricky bit with the whole spit strategy is that it relies on
"slicing" off Spack's dependency tree by redirecting the line of
slicing to the OS by entries in [[./scope/packages.yaml]].  This slice
line is somewhat brittle as it is defined in terms of both package and
a concrete version.  When adding a new package, increasing the version
of an existing package or perhaps even pulling on Spack's git clone
the slice line may shift.

In any case, to manage ~packages.yaml~ one must discover the versions
that the Spack concretization chooses.  After providing an initial
~package.py~ for package ~<name>~ you can discover package name and
versions to put into ~packages.yaml~ with:

#+begin_example
./spit spec <name>
#+end_example

Focus on just the top-level dependencies one layer below the ~<name>~.
Add each to ~packages.yaml~ with the version listed.

Actually, Spack can fill ~packages.yaml~ automatically, but some care is
needed as it seems to not honor the /scope/ directory and will modify
~$HOME/.spack/packages.yaml~:

#+begin_example
## writes to ~/.spack/packages.yaml, not scope/packages.yaml!
./spit external find --no-buildable --all
#+end_example

At the very least, this can save some typing by copy-pasting between
the two files before restoring ~$HOME/.spack/packages.yaml~ to its
original condition.

In any case, after this surgery test some package installation:

#+begin_example
./spit install <name>
#+end_example

And, check the output to confirm that Spack builds only the desired
set of packages.

** Refresh the install and view

#+begin_example
./spit cycle
#+end_example

* Todo

- [ ] Package [[https://xapian.org/docs/install.html][xapian-bindings]] as ~py-xapian~
  - [ ] Build Python via Spack and see if it lets ~xapers~ find its modules. 
  - [ ] If that works, remove ~spit-bodge~
